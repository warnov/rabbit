@page "/stage/{stageId}"
@using rabbit_maui.Core.Models
@inject rabbit_maui.Core.Services.RallyState RallyState
@inject IJSRuntime JSRuntime

@code {
    [Parameter] public string? stageId { get; set; }
    private Stage? stage;

    protected override void OnParametersSet()
    {
        stage = RallyState.CurrentRally.Stages.FirstOrDefault(s => s.Id == stageId);
    }

    private void AddSegment(double km, double min)
    {
        if (stage is null) return;
        RallyState.AddSegment(stage, km, min);
    }

    private async Task AddEmptySegment()
    {
        if (stage is null) return;
        RallyState.AddSegment(stage); // no args → null/null → inputs empty

        // Wait for UI to render the new segment
        await Task.Delay(50);

        // Focus the last km input using a CSS selector
        await JSRuntime.InvokeVoidAsync("focusLastKmInput");
    }

    private void RemoveSegment(int index)
    {
        if (stage is null) return;
        if (index >= 0 && index < stage.Segments.Count) stage.Segments.RemoveAt(index);
    }

    private double StageTotalDistance =>
    stage?.Segments.Sum(seg => seg.DistanceKm ?? 0) ?? 0;

    private double StageTotalTime =>
    stage?.Segments.Sum(seg => seg.TimeMin ?? 0) ?? 0;

    private double StageAverageSpeed =>
    StageTotalTime > 0 ? Math.Round((StageTotalDistance / StageTotalTime) * 60.0, 1) : 0.0;
}

@if (stage is null)
{
    <p>Stage not found.</p>
}
else
{
    <h2>@stage.Id (@stage.Name)</h2>

    @if (stage?.Segments.Any() == true)
    {
        <table class="segment-table">
            <thead>
                <tr>
                    <th>ZR</th>
                    <th>km</th>
                    <th>min</th>
                    <th>km/h</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < stage.Segments.Count; i++)
                {
                    var s = stage.Segments[i];
                    var index = i;

                    <tr @key="s.Id">
                        <td class="zr-id">@s.Id</td>

                        <td>
                            <input class="num-input km-input"
                                   type="number"
                                   step="0.1"
                                   inputmode="decimal"
                                   @bind="stage.Segments[index].DistanceKm" />
                        </td>

                        <td>
                            <input class="num-input min"
                                   type="number"
                                   step="1"
                                   inputmode="numeric"
                                   @bind="stage.Segments[index].TimeMin" />
                        </td>

                        <td>@s.SpeedKmh</td>

                        <td>
                            <button @onclick="@(() => RemoveSegment(index))">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>No segments added yet.</p>
    }

    <button @onclick="AddEmptySegment">Add Segment</button>

    <hr />
    <h3>Stage Summary</h3>
    <p>Total Distance: @StageTotalDistance km</p>
    <p>Total Time: @StageTotalTime min</p>
    <p>Average Speed: @StageAverageSpeed km/h</p>
}